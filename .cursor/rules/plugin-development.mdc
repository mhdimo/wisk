---
description: 
globs: 
alwaysApply: true
---
# Wisk Plugin Development Guide

## Plugin System Overview
Wisk uses a comprehensive plugin system where **most functionality is implemented as plugins**. The central registry is [js/plugins/plugin-data.json](mdc:js/plugins/plugin-data.json).

## Plugin Categories & Examples

### Component Plugins (Document Blocks)
Most common plugin type - adds new block types to documents:
- `text-element` - Basic text blocks
- `code-element` - Code blocks with syntax highlighting  
- `latex-element` - Mathematical equations
- `image-element` - Image blocks
- `table-element` - Table blocks
- `chart-element` - Data visualization
- `canvas-element` - Drawing canvas
- `database-element` - Spreadsheet-like data tables

### UI Plugins
- `mini-dialog` - Popup dialogs (options, symbols, pomodoro timer)
- `right-sidebar` - Right panel plugins (citations, chat, PDF preview)
- `left-sidebar` - Left panel plugins (navigation menu)
- `nav-mini` - Navigation bar elements (word count, music player)

### Background Plugins  
- `auto` - Automatically loaded plugins (AI, powerlevel, vim keybindings)

## Plugin Registration Format

```json
"plugin-name": {
    "name": "plugin-name",
    "title": "Human Readable Title",
    "author": "Wisk Team",
    "contact": "https://wisk.cc",
    "icon": "icon-name.svg",
    "tags": ["tag1", "tag2"],
    "description": "Plugin description",
    "hide": true, // Optional: hide from plugin lists
    "contents": [
        {
            "title": "Block Title",
            "icon": "block-icon.svg",
            "category": "component|mini-dialog|right-sidebar|left-sidebar|nav-mini|auto",
            "component": "html-element-name",
            "nav": true|false, // Show in navigation
            "textual": true|false, // Handles text content
            "loadAsModule": true|false, // Loading mechanism
            "width": "mini|max", // Block width for components
            "experimental": true, // Optional: experimental flag
            "identifier": "unique_id" // Optional: unique identifier
        }
    ]
}
```

## Plugin Properties

### Width Control
This is only for component plugins
- `"width": "mini"` - Standard width blocks
- `"width": "max"` - Full-width blocks (like main-element)

### Loading Mechanism
- `"loadAsModule": true` - Load as ES6 module
- `"loadAsModule": false` - Load as regular script

### Content Types
This is only for component plugins
- `"textual": true` - Plugin handles text content (can be edited)
- `"textual": false` - Plugin is interactive/media element

### Navigation Integration
Isnt for component plugins
- `"nav": true` - Show in navigation/toolbar
- `"nav": false` - Background functionality only

## Plugin File Organization
- **Plugin code**: All plugins stored in `/js/plugins/code/` directory
- **Icons**: Plugin icons in `/js/plugins/icons/` directory
- **Auto-loading**: Plugins automatically loaded by editor based on document configuration

## Development Workflow

### Creating New Component Plugin
1. Create plugin file in `/js/plugins/code/your-plugin.js`
2. Implement as Web Component
3. Register in [js/plugins/plugin-data.json](mdc:js/plugins/plugin-data.json)
4. Add icon to `/js/plugins/icons/`
5. Plugin automatically available in editor

### Plugin Code Structure
Plugins are Web Components that follow these patterns:
- Use `customElements.define()` to register
- Implement standard Web Component lifecycle
- Access editor APIs through `wisk.editor.*`
- Use CSS variables from [js/theme/variables.css](mdc:js/theme/variables.css)

## Special Plugin Categories

### Experimental Plugins
- Mark with `"experimental": true`
- May have unstable APIs
- Examples: `database-element`, `tweaks-element`, `vim`

### Hidden Plugins  
- Mark with `"hide": true`
- Not shown in plugin lists
- Examples: `share-manager`, `main-element`

### Multi-Component Plugins
Some plugins register multiple components:
- `database-element` - includes `database-element` and `database-page`
- `sticky-notes` - includes dialog and `pin-element`

## Editor Integration
- Plugins auto-load based on document's plugin configuration
- Access editor APIs: `wisk.editor.createNewBlock()`, `wisk.editor.updateBlock()`, etc.
- Use theme system: CSS variables from [js/theme/variables.css](mdc:js/theme/variables.css)
- Storage APIs: `wisk.db.*` for local storage, `wisk.sync.*` for collaboration
